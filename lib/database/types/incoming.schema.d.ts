/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type ToDeploy =
  | {
      __type: "deploy";
      data: {
        chall: ChallIdentifier;
        force_wipe: boolean;
      };
    }
  | {
      __type: "poll";
      data: {
        id: string;
      };
    }
  | {
      __type: "remove";
      data: {
        chall: string;
      };
    }
  | {
      __type: "modify_meta";
      data: {
        id: string;
        name?: string | null;
        desc?: string | null;
        points?: number | null;
        categories?: string[] | null;
        tags?: string[] | null;
        visible?: boolean | null;
      };
    }
  | {
      __type: "list_challs";
    };
export type ChallIdentifier = string;
export type ToDiscord =
  | {
      __type: "developer";
      details: DeveloperDiscordMessage;
    }
  | {
      __type: "participant";
      details: ParticipantMessage;
    };
export type AlertLevel = "INFO" | "WARN" | "ERROR";
export type ParticipantMessage =
  | {
      __participant_message_type: "first_blood";
      metadata: {
        chall_name: string;
        team: string;
        user: string;
      };
    }
  | {
      __participant_message_type: "alert";
      metadata: {
        message: string;
      };
    };
export type ToFrontend = {
  __type: "sync";
  data: SyncType;
};
export type SyncType =
  | {
      __sync_type: "chall";
      id: string;
    }
  | {
      __sync_type: "all_challs";
    }
  | {
      __sync_type: "user";
      id: string;
    }
  | {
      __sync_type: "all_users";
    }
  | {
      __sync_type: "team";
      id: string;
    }
  | {
      __sync_type: "all_teams";
    }
  | {
      __sync_type: "solves";
    }
  | {
      __sync_type: "all";
    };
export type ToSql =
  | {
      __type: "user";
      details: UserQuery;
    }
  | {
      __type: "team";
      details: TeamQuery;
    }
  | {
      __type: "chall";
      details: ChallQuery;
    }
  | {
      __type: "solve";
      details: SolveQuery;
    };
export type UserQuery =
  | {
      __query_name: "available";
      params: {
        name: string;
      };
    }
  | {
      __query_name: "create";
      params: {
        email: string;
        name: string;
        eligible: boolean;
        admin: boolean;
        auth: Auth;
      };
    }
  | {
      __query_name: "check_auth";
      params: {
        id: string;
        auth: Auth;
      };
    }
  | {
      __query_name: "update_auth";
      params: {
        id: string;
        old_auth: Auth;
        new_auth: Auth;
      };
    }
  | {
      __query_name: "join";
      params: {
        id: string;
        auth: Auth;
        team_name: string;
        team_pass: string;
      };
    }
  | {
      __query_name: "get";
      params: {
        id: string;
      };
    }
  | {
      __query_name: "get_all";
    };
export type Auth =
  | {
      __type: "o_auth";
      params: {
        sub: string;
        provider: string;
        oauth_allow_token: string;
      };
    }
  | {
      __type: "pass";
      params: {
        password: string;
      };
    };
export type TeamQuery =
  | {
      __query_name: "available";
      params: {
        name: string;
      };
    }
  | {
      __query_name: "create";
      params: {
        name: string;
        description: string;
        eligible: boolean;
        affiliation?: string | null;
        password: string;
        initial_user: string;
        user_auth: Auth;
      };
    }
  | {
      __query_name: "update";
      params: {
        id: string;
        name?: string | null;
        description?: string | null;
        eligible?: boolean | null;
        affiliation?: string | null;
        password: string;
      };
    }
  | {
      __query_name: "get";
      params: {
        id: string;
      };
    }
  | {
      __query_name: "get_all";
    }
  | {
      __query_name: "get_top";
      params: {
        limit: number;
      };
    }
  | {
      __query_name: "get_top_history";
      params: {
        limit: number;
        start_time: string;
      };
    };
export type ChallQuery =
  | {
      __query_name: "create";
      params: {
        id?: string | null;
        name: string;
        description: string;
        points: number;
        authors: string[];
        hints: string[];
        categories: string[];
        tags: string[];
        links: Link[];
        visible: boolean;
        source_folder: string;
        flag: string;
      };
    }
  | {
      __query_name: "update";
      params: {
        id: string;
        name?: string | null;
        description?: string | null;
        points?: number | null;
        authors?: string[] | null;
        hints?: string[] | null;
        categories?: string[] | null;
        tags?: string[] | null;
        links?: Link[] | null;
        visible?: boolean | null;
        source_folder?: string | null;
      };
    }
  | {
      __query_name: "get";
      params: {
        id: string;
      };
    }
  | {
      __query_name: "get_all";
    };
export type LinkType = "nc" | "web" | "admin" | "static";
export type SolveQuery =
  | {
      __query_name: "get_all";
    }
  | {
      __query_name: "get";
      params: {
        id: string;
      };
    }
  | {
      __query_name: "get_chall";
      params: {
        chall_id: string;
      };
    }
  | {
      __query_name: "get_team";
      params: {
        team_id: string;
      };
    }
  | {
      __query_name: "get_user";
      params: {
        user_id: string;
      };
    }
  | {
      __query_name: "attempt";
      params: {
        user_id: string;
        team_id: string;
        chall_id: string;
        user_auth: Auth;
        flag_guess: string;
      };
    }
  | {
      __query_name: "clear_all_chall";
      params: {
        id: string;
      };
    };

/**
 * This is the main struct that basically the entire server is built around.
 *
 * It implements [`Handle`][crate::handlers::Handle] to make it easy to process & respond to requests.
 *
 * It's built to be as flexible as possible, but there are still some things that are need to be doneâ€” notably allowing batch queries for each of the targets.
 */
export interface Incoming {
  /**
   * Deploy query (create, poll, and stop deployments)
   */
  deploy?: ToDeploy | null;
  /**
   * Discord query (first blood and organizer notifications)
   */
  discord?: ToDiscord | null;
  /**
   * Frontend query (Resync cache)
   */
  frontend?: ToFrontend | null;
  /**
   * SQL query (addition, modification, and deletion of solves, teams, users, challenges, etc.)
   */
  sql?: ToSql | null;
}
export interface DeveloperDiscordMessage {
  level: AlertLevel;
  message: string;
  data: unknown;
  include_chall_writers: boolean;
}
export interface Link {
  type: LinkType;
  location: string;
}
